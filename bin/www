#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sample:server');
var http = require('http');

//firebase
const { initializeApp, applicationDefault, cert } = require('firebase-admin/app');
const { getFirestore, Timestamp, FieldValue } = require('firebase-admin/firestore');
const { create } = require('domain');

initializeApp();

const db = getFirestore();

const docRef = db.collection('users').doc('alovelace');

/**
 * Add data
 Cloud Firestore stores data in Documents, which are stored in Collections.
 Cloud Firestore creates collections and documents implicitly the first time you add data to the document. 
 You do not need to explicitly create collections or documents.

Create a new collection and a document using the following example code.
 * 
 */

async function createCollection() {

  await docRef.set({
    first: 'Ada',
    last: 'Lovelace',
    born: 1815
  });
}
createCollection()


/**
 * Now add another document to the users collection. 
 * Notice that this document includes a key-value pair (middle name) that does not appear
 *  in the first document. Documents in a collection can contain different sets of information.
 * 
 */

async function createAnotherCollection(){

  const aTuringRef = db.collection('users').doc('aturing');
  
  await aTuringRef.set({
    'first': 'Alan',
    'middle': 'Mathison',
    'last': 'Turing',
    'born': 1912
  });

}

createAnotherCollection()


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
console.log(`server running @ port ${port}`)
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
